我的答案是

1. 一般而言不会在js代码中去直接操作html元素, 这样会使得代码看起来繁杂。
2. 而且用了join 方法，同样的增加操作字符串的消耗。

function updateFirstVisitor(){
  // 用了jquery的ajax call
  $.getJSON("http://some.url", function(json){
      var visitor = json[0] ;
      var name = visitor.a;
      var age  = visitor.b;

      $("div.name span").text(name);
      $("div.age span").text(age);
  })
}


2.	方案不需要考虑浏览器兼容性。但给出方案后，请注明浏览器的大致兼容范围。
IE 8+ 都能兼容, 火狐，chrome，360 一般的版本都没有问题。

3. 考虑如果需要结果可序列化，可使用 Object.keys() 取得所有属性，该怎么做？
object.keys() 没有使用过。
比如说对爱看的电影数组进行排序，在java中一般用hashmap 来解决，把电影的名字作为hashmap的key
并用内在的 sort 方法进行排序。


4.	如果服务器的返回值非常庞大（比如服务器每次返回数组可能包含上千个对象）
且和服务器的沟通非常频繁（比如每秒一次和服务器进行轮询沟通），解决方案是否会有性能瓶颈？ 比如阻塞渲染？

如果返回的对象很大，数据传输通常会用很多的时间比如 3s 或者更多，我们的函数是在整个对象传输结束之后再去处理json对象
所以会有瓶颈。

解决的方法就是缓存起来，第一次加载的时候没有办法，只能等所有的数据都加载完成。
第二次就可以到localstorage 里面去找。

同时，服务器端可以判断，客户端所需求的数据时候有变化，如果没有变化就直接使用本地的版本。同时服务器也可以对数据进行压缩处理
减少传输时间。
